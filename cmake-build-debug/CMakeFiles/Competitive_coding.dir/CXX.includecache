#IncludeRegexLine: ^[ 	]*[#%][ 	]*(include|import)[ 	]*[<"]([^">]+)([">])

#IncludeRegexScan: ^.*$

#IncludeRegexComplain: ^$

#IncludeRegexTransform: 

/home/tejas/Competitive-coding/Brute_Search/meet_in_the_middle.cpp

/home/tejas/Competitive-coding/Brute_Search/subset.cpp

/home/tejas/Competitive-coding/DP/DP_tree/rerooting/Max_white_subtree.cpp

/home/tejas/Competitive-coding/DP/DP_tree/rerooting/Tree_with_max_cost.cpp

/home/tejas/Competitive-coding/DP/DP_tree/rerooting/tree_distances2.cpp

/home/tejas/Competitive-coding/DP/DP_tree/rerooting/tree_painting.cpp

/home/tejas/Competitive-coding/DP/Digitdp.cpp

/home/tejas/Competitive-coding/DP/LIS.cpp

/home/tejas/Competitive-coding/DP/bounded_knapsack.cpp

/home/tejas/Competitive-coding/DP/digitdp_ques/369numbers.cpp
bits/stdc++.h
-

/home/tejas/Competitive-coding/DP/digitdp_ques/AOPN.cpp
bits/stdc++.h
-
ext/pb_ds/assoc_container.hpp
-
ext/pb_ds/tree_policy.hpp
-

/home/tejas/Competitive-coding/DP/digitdp_ques/MPRODMUL.cpp
bits/stdc++.h
-
ext/pb_ds/assoc_container.hpp
-
ext/pb_ds/tree_policy.hpp
-

/home/tejas/Competitive-coding/DP/digitdp_ques/MaximumProduct.cpp
bits/stdc++.h
-
ext/pb_ds/assoc_container.hpp
-
ext/pb_ds/tree_policy.hpp
-

/home/tejas/Competitive-coding/DP/digitdp_ques/Pattern110.cpp
bits/stdc++.h
-

/home/tejas/Competitive-coding/DP/digitdp_ques/classy.cpp
bits/stdc++.h
-
ext/pb_ds/assoc_container.hpp
-
ext/pb_ds/tree_policy.hpp
-

/home/tejas/Competitive-coding/DP/digitdp_ques/encoding.cpp
bits/stdc++.h
-
ext/pb_ds/assoc_container.hpp
-
ext/pb_ds/tree_policy.hpp
-

/home/tejas/Competitive-coding/DP/digitdp_ques/gone.cpp
bits/stdc++.h
-
ext/pb_ds/assoc_container.hpp
-
ext/pb_ds/tree_policy.hpp
-

/home/tejas/Competitive-coding/DP/digitdp_ques/lucifer.cpp
bits/stdc++.h
-
ext/pb_ds/assoc_container.hpp
-
ext/pb_ds/tree_policy.hpp
-

/home/tejas/Competitive-coding/DP/digitdp_ques/magicnumbers.cpp
bits/stdc++.h
-
ext/pb_ds/assoc_container.hpp
-
ext/pb_ds/tree_policy.hpp
-

/home/tejas/Competitive-coding/DP/digitdp_ques/raone.cpp
bits/stdc++.h
-
ext/pb_ds/assoc_container.hpp
-
ext/pb_ds/tree_policy.hpp
-

/home/tejas/Competitive-coding/DP/dp.cpp

/home/tejas/Competitive-coding/DP/matrixexp.cpp

/home/tejas/Competitive-coding/DS/2D-fenwick_tree.cpp

/home/tejas/Competitive-coding/DS/Fenwick trees.cpp

/home/tejas/Competitive-coding/DS/Mo.cpp

/home/tejas/Competitive-coding/DS/mo_hilbert.cpp

/home/tejas/Competitive-coding/DS/segtree(non-recursive).cpp

/home/tejas/Competitive-coding/DS/sparse_table.cpp

/home/tejas/Competitive-coding/DS/sqrtdecomp.cpp

/home/tejas/Competitive-coding/DS/trie(bit).cpp

/home/tejas/Competitive-coding/Flows/dinic.cpp

/home/tejas/Competitive-coding/Flows/flow_path.cpp

/home/tejas/Competitive-coding/Flows/max_match.cpp

/home/tejas/Competitive-coding/Flows/max_match_N^3.cpp

/home/tejas/Competitive-coding/Flows/mincut.cpp

/home/tejas/Competitive-coding/Game/Game.cpp

/home/tejas/Competitive-coding/Geometry/convexhull.cpp

/home/tejas/Competitive-coding/Graphs/Components/2D-DSU.cpp

/home/tejas/Competitive-coding/Graphs/Components/DSU.cpp

/home/tejas/Competitive-coding/Graphs/Components/scc.cpp

/home/tejas/Competitive-coding/Graphs/DAG/topo.cpp

/home/tejas/Competitive-coding/Graphs/Eulerian/hierholzers-algorithm.cpp

/home/tejas/Competitive-coding/Graphs/Kinght_tour/knight.cpp

/home/tejas/Competitive-coding/Graphs/MST/Kruskal.cpp

/home/tejas/Competitive-coding/Graphs/Shortest_paths/Dijkstra.cpp

/home/tejas/Competitive-coding/Graphs/Shortest_paths/bellman.cpp

/home/tejas/Competitive-coding/Graphs/Shortest_paths/dijsktra_dig.cpp

/home/tejas/Competitive-coding/Graphs/Shortest_paths/floyd.cpp

/home/tejas/Competitive-coding/Graphs/Traversals/Bipartite.cpp

/home/tejas/Competitive-coding/Graphs/Traversals/bfs.cpp

/home/tejas/Competitive-coding/Graphs/Traversals/cycle.cpp

/home/tejas/Competitive-coding/Graphs/Traversals/dfs.cpp

/home/tejas/Competitive-coding/Graphs/Traversals/grith.cpp

/home/tejas/Competitive-coding/Libraries/bigint.cpp

/home/tejas/Competitive-coding/Maths/fastexpo.cpp

/home/tejas/Competitive-coding/Maths/linear_sieve.cpp

/home/tejas/Competitive-coding/Maths/ncr.cpp

/home/tejas/Competitive-coding/Maths/no of divisors.cpp

/home/tejas/Competitive-coding/Maths/sumofdiv.cpp

/home/tejas/Competitive-coding/Maths/totient.cpp

/home/tejas/Competitive-coding/STL/ASCII.cpp

/home/tejas/Competitive-coding/STL/algolib.cpp

/home/tejas/Competitive-coding/STL/rand.cpp

/home/tejas/Competitive-coding/Stack_Queue/max_histogram.cpp

/home/tejas/Competitive-coding/Stack_Queue/max_one_rectangle.cpp

/home/tejas/Competitive-coding/Strings/KMP.cpp

/home/tejas/Competitive-coding/Strings/Z_algo.cpp

/home/tejas/Competitive-coding/Strings/dfa.cpp

/home/tejas/Competitive-coding/Strings/hashing.cpp

/home/tejas/Competitive-coding/Strings/manacher.cpp

/home/tejas/Competitive-coding/Strings/suffix_array.cpp

/home/tejas/Competitive-coding/Strings/suffix_array_fast.cpp

/home/tejas/Competitive-coding/Strings/suffix_lcp.cpp

/home/tejas/Competitive-coding/Techs/compress.cpp

/home/tejas/Competitive-coding/Template.cpp
bits/stdc++.h
-
ext/pb_ds/assoc_container.hpp
-
ext/pb_ds/tree_policy.hpp
-

/home/tejas/Competitive-coding/Trees/Centroid.cpp

/home/tejas/Competitive-coding/Trees/LCA.cpp

/home/tejas/Competitive-coding/Trees/center_tree.cpp

/home/tejas/Competitive-coding/Trees/diameter.cpp

/home/tejas/Competitive-coding/Trees/lca_bin.cpp

/home/tejas/Competitive-coding/Trees/mo_tree_hilbert.cpp

/home/tejas/Competitive-coding/Trees/mo_trees.cpp

/home/tejas/Competitive-coding/Trees/prufer.cpp

/home/tejas/Competitive-coding/Trees/subtree.cpp

/home/tejas/Competitive-coding/search/Binarysearch.cpp

/home/tejas/Competitive-coding/search/ternary.cpp

